/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ParagraphFamily, ParagraphSize } from "./module/atoms/ui-paragraph/ui-paragraph.interface";
export { ParagraphFamily, ParagraphSize } from "./module/atoms/ui-paragraph/ui-paragraph.interface";
export namespace Components {
    interface UiButton {
        "disabled": boolean;
        "fullwidth": boolean;
        "size": "lg" | "md" | "sm";
        "tier": "primary" | "secondary" | "text";
    }
    interface UiCheckbox {
    }
    interface UiHamburguer {
        "mode": "dark" | "light";
        "size": string;
    }
    interface UiIcon {
        "color": string;
        "name": string;
        "size": string;
    }
    interface UiImg {
        "alt": string;
        "height": string;
        "src": string;
        "type": "rectangle" | "circle";
        "width": string;
    }
    interface UiInput {
        "label": string;
        "size": "lg" | "md" | "sm";
        "type": "text" | "password";
    }
    interface UiMenu {
        "position": "right" | "left";
    }
    interface UiMenuOption {
        "name": string;
    }
    interface UiNavbar {
        "fixed": boolean;
        "mode": "dark" | "light" | "light-transparent" | "dark-transparent";
        "shadow": boolean;
    }
    interface UiParagraph {
        /**
          * @color El color del párrafo
         */
        "color": string;
        "family": ParagraphFamily;
        /**
          * @Size el tamaño del párrafo
         */
        "size": ParagraphSize;
    }
    interface UiTitle {
        "color": string;
        "family": "bold" | "regular";
        "size": "lg" | "md" | "sm";
    }
}
export interface UiButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiButtonElement;
}
export interface UiNavbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiNavbarElement;
}
declare global {
    interface HTMLUiButtonElementEventMap {
        "ctrlClick": any;
    }
    interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiButtonElementEventMap>(type: K, listener: (this: HTMLUiButtonElement, ev: UiButtonCustomEvent<HTMLUiButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiButtonElementEventMap>(type: K, listener: (this: HTMLUiButtonElement, ev: UiButtonCustomEvent<HTMLUiButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiButtonElement: {
        prototype: HTMLUiButtonElement;
        new (): HTMLUiButtonElement;
    };
    interface HTMLUiCheckboxElement extends Components.UiCheckbox, HTMLStencilElement {
    }
    var HTMLUiCheckboxElement: {
        prototype: HTMLUiCheckboxElement;
        new (): HTMLUiCheckboxElement;
    };
    interface HTMLUiHamburguerElement extends Components.UiHamburguer, HTMLStencilElement {
    }
    var HTMLUiHamburguerElement: {
        prototype: HTMLUiHamburguerElement;
        new (): HTMLUiHamburguerElement;
    };
    interface HTMLUiIconElement extends Components.UiIcon, HTMLStencilElement {
    }
    var HTMLUiIconElement: {
        prototype: HTMLUiIconElement;
        new (): HTMLUiIconElement;
    };
    interface HTMLUiImgElement extends Components.UiImg, HTMLStencilElement {
    }
    var HTMLUiImgElement: {
        prototype: HTMLUiImgElement;
        new (): HTMLUiImgElement;
    };
    interface HTMLUiInputElement extends Components.UiInput, HTMLStencilElement {
    }
    var HTMLUiInputElement: {
        prototype: HTMLUiInputElement;
        new (): HTMLUiInputElement;
    };
    interface HTMLUiMenuElement extends Components.UiMenu, HTMLStencilElement {
    }
    var HTMLUiMenuElement: {
        prototype: HTMLUiMenuElement;
        new (): HTMLUiMenuElement;
    };
    interface HTMLUiMenuOptionElement extends Components.UiMenuOption, HTMLStencilElement {
    }
    var HTMLUiMenuOptionElement: {
        prototype: HTMLUiMenuOptionElement;
        new (): HTMLUiMenuOptionElement;
    };
    interface HTMLUiNavbarElementEventMap {
        "ctrlBrand": any;
    }
    interface HTMLUiNavbarElement extends Components.UiNavbar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiNavbarElementEventMap>(type: K, listener: (this: HTMLUiNavbarElement, ev: UiNavbarCustomEvent<HTMLUiNavbarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiNavbarElementEventMap>(type: K, listener: (this: HTMLUiNavbarElement, ev: UiNavbarCustomEvent<HTMLUiNavbarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiNavbarElement: {
        prototype: HTMLUiNavbarElement;
        new (): HTMLUiNavbarElement;
    };
    interface HTMLUiParagraphElement extends Components.UiParagraph, HTMLStencilElement {
    }
    var HTMLUiParagraphElement: {
        prototype: HTMLUiParagraphElement;
        new (): HTMLUiParagraphElement;
    };
    interface HTMLUiTitleElement extends Components.UiTitle, HTMLStencilElement {
    }
    var HTMLUiTitleElement: {
        prototype: HTMLUiTitleElement;
        new (): HTMLUiTitleElement;
    };
    interface HTMLElementTagNameMap {
        "ui-button": HTMLUiButtonElement;
        "ui-checkbox": HTMLUiCheckboxElement;
        "ui-hamburguer": HTMLUiHamburguerElement;
        "ui-icon": HTMLUiIconElement;
        "ui-img": HTMLUiImgElement;
        "ui-input": HTMLUiInputElement;
        "ui-menu": HTMLUiMenuElement;
        "ui-menu-option": HTMLUiMenuOptionElement;
        "ui-navbar": HTMLUiNavbarElement;
        "ui-paragraph": HTMLUiParagraphElement;
        "ui-title": HTMLUiTitleElement;
    }
}
declare namespace LocalJSX {
    interface UiButton {
        "disabled"?: boolean;
        "fullwidth"?: boolean;
        "onCtrlClick"?: (event: UiButtonCustomEvent<any>) => void;
        "size"?: "lg" | "md" | "sm";
        "tier"?: "primary" | "secondary" | "text";
    }
    interface UiCheckbox {
    }
    interface UiHamburguer {
        "mode"?: "dark" | "light";
        "size"?: string;
    }
    interface UiIcon {
        "color"?: string;
        "name"?: string;
        "size"?: string;
    }
    interface UiImg {
        "alt"?: string;
        "height"?: string;
        "src"?: string;
        "type"?: "rectangle" | "circle";
        "width"?: string;
    }
    interface UiInput {
        "label"?: string;
        "size"?: "lg" | "md" | "sm";
        "type"?: "text" | "password";
    }
    interface UiMenu {
        "position"?: "right" | "left";
    }
    interface UiMenuOption {
        "name"?: string;
    }
    interface UiNavbar {
        "fixed"?: boolean;
        "mode"?: "dark" | "light" | "light-transparent" | "dark-transparent";
        "onCtrlBrand"?: (event: UiNavbarCustomEvent<any>) => void;
        "shadow"?: boolean;
    }
    interface UiParagraph {
        /**
          * @color El color del párrafo
         */
        "color"?: string;
        "family"?: ParagraphFamily;
        /**
          * @Size el tamaño del párrafo
         */
        "size"?: ParagraphSize;
    }
    interface UiTitle {
        "color"?: string;
        "family"?: "bold" | "regular";
        "size"?: "lg" | "md" | "sm";
    }
    interface IntrinsicElements {
        "ui-button": UiButton;
        "ui-checkbox": UiCheckbox;
        "ui-hamburguer": UiHamburguer;
        "ui-icon": UiIcon;
        "ui-img": UiImg;
        "ui-input": UiInput;
        "ui-menu": UiMenu;
        "ui-menu-option": UiMenuOption;
        "ui-navbar": UiNavbar;
        "ui-paragraph": UiParagraph;
        "ui-title": UiTitle;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ui-button": LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
            "ui-checkbox": LocalJSX.UiCheckbox & JSXBase.HTMLAttributes<HTMLUiCheckboxElement>;
            "ui-hamburguer": LocalJSX.UiHamburguer & JSXBase.HTMLAttributes<HTMLUiHamburguerElement>;
            "ui-icon": LocalJSX.UiIcon & JSXBase.HTMLAttributes<HTMLUiIconElement>;
            "ui-img": LocalJSX.UiImg & JSXBase.HTMLAttributes<HTMLUiImgElement>;
            "ui-input": LocalJSX.UiInput & JSXBase.HTMLAttributes<HTMLUiInputElement>;
            "ui-menu": LocalJSX.UiMenu & JSXBase.HTMLAttributes<HTMLUiMenuElement>;
            "ui-menu-option": LocalJSX.UiMenuOption & JSXBase.HTMLAttributes<HTMLUiMenuOptionElement>;
            "ui-navbar": LocalJSX.UiNavbar & JSXBase.HTMLAttributes<HTMLUiNavbarElement>;
            "ui-paragraph": LocalJSX.UiParagraph & JSXBase.HTMLAttributes<HTMLUiParagraphElement>;
            "ui-title": LocalJSX.UiTitle & JSXBase.HTMLAttributes<HTMLUiTitleElement>;
        }
    }
}
